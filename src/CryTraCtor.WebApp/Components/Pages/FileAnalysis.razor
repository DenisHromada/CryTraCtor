@page "/files/{StoredFileId:guid}/file-analysis"

@using CryTraCtor.Business.Facades.Interfaces
@using CryTraCtor.Business.Models.FileAnalysis
@using CryTraCtor.Business.Services
@using CryTraCtor.WebApp.Services
@inject IFileAnalysisFacade FileAnalysisFacade
@inject FileAnalysisService FileAnalysisService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IBreadcrumbService BreadcrumbService

<h3>File Analysis</h3>

<MudPaper Class="pa-4 mb-4">
    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               StartIcon="@Icons.Material.Filled.Science"
               OnClick="@GenerateFileAnalysis">
        Analyze
    </MudButton>
</MudPaper>

<MudDataGrid Items="@_elements" Hover="true" RowClass="cursor-pointer" T="FileAnalysisListModel"
             RowClick="@RowClicked">
    <Columns>
        <PropertyColumn Property="x => x.Id" Title="Id"/>
        <PropertyColumn Property="x => x.Name" Title="Name"/>
        <PropertyColumn Property="x => x.CreatedAt" Title="Created At"/>
        <TemplateColumn>
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               OnClick="@(() => DeleteFileAnalysis(context.Item?.Id))"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    [Parameter] public Guid StoredFileId { get; set; }
    private List<FileAnalysisListModel> _elements = new();
    private bool _isAnalyzing = false;

    protected override async Task OnInitializedAsync()
    {
        var breadcrumbs = new List<BreadcrumbItem>
        {
            new("Files", href: "/files"),
            new("File Analysis", href: null, disabled: true)
        };
        BreadcrumbService.SetBreadcrumbs(breadcrumbs);

        await LoadAnalysesAsync();
    }

    private async Task LoadAnalysesAsync()
    {
        try
        {
            _elements = (await FileAnalysisFacade.GetByStoredFileIdAsync(StoredFileId)).ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading analyses: {ex.Message}", Severity.Error);
            _elements = [];
        }
    }

    private async Task GenerateFileAnalysis()
    {
        if (_isAnalyzing) return;

        _isAnalyzing = true;
        try
        {
            var newAnalysis = await FileAnalysisService.CreateAnalysis(StoredFileId);
            Snackbar.Add($"Endpoint analysis '{newAnalysis.Name}' completed successfully (ID: {newAnalysis.Id}).", Severity.Success);
            await LoadAnalysesAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error during analysis: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isAnalyzing = false;
            StateHasChanged();
        }
    }

    private async Task DeleteFileAnalysis(Guid? id)
    {
        if (id is null)
        {
            return;
        }

        await FileAnalysisFacade.DeleteAsync((Guid)id);
        _elements = (await FileAnalysisFacade.GetAllAsync()).ToList();
        Snackbar.Add($"Analysis deleted successfully", Severity.Success);
    }

    private void RowClicked(DataGridRowClickEventArgs<FileAnalysisListModel> args)
    {
        NavigationManager.NavigateTo($"/files/{StoredFileId}/file-analysis/{args.Item.Id}/traffic-participants");
    }

}

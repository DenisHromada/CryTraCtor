@page "/files/{FileId:guid}/file-analysis/{FileAnalysisId:guid}/traffic-participants/{ParticipantId:guid}/bitcoin/message/{MessageId:guid}/inventory/{InventoryId:guid}"

@using CryTraCtor.Business.Facades.Interfaces
@using CryTraCtor.Business.Models.Bitcoin
@using CryTraCtor.WebApp.Services
@inject IBitcoinInventoryFacade BitcoinInventoryFacade
@inject IBreadcrumbService BreadcrumbService
@inject ISnackbar Snackbar

<PageTitle>Bitcoin Inventory References</PageTitle>

@if (_inventoryDetailModel != null)
{
    <h3>References for Inventory Item: @_inventoryDetailModel.Type / @_inventoryDetailModel.Hash</h3>

    @if (_inventoryDetailModel.ReferencingPackets != null)
    {
        <MudDataGrid Items="@_inventoryDetailModel.ReferencingPackets" T="BitcoinPacketDetailModel" Dense="true"
                     Striped="true" Hover="true">
            <Columns>
                <PropertyColumn Property="x => x.Timestamp" Title="Timestamp" Format="yyyy-MM-dd HH:mm:ss.fff"/>
                <PropertyColumn Property="x => x.Command" Title="Command"/>
                <TemplateColumn Title="Sender">
                    <CellTemplate>
                        @context.Item.Sender?.Address:@context.Item.Sender?.Port
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="Recipient">
                    <CellTemplate>
                        @context.Item.Recipient?.Address:@context.Item.Recipient?.Port
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="Actions">
                    <CellTemplate>
                        <MudTooltip Text="View Message Details">
                            <MudIconButton Icon="@Icons.Material.Filled.Info" Size="Size.Small" Color="Color.Primary"
                                           Href="@(AppRoutes.BitcoinMessageDetailUrl(FileId, FileAnalysisId, ParticipantId, context.Item.Id))"/>
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    }
    else
    {
        <MudText>Loading...</MudText>
    }
}
else
{
    <MudText>Inventory item not found.</MudText>
}

@code {
    [Parameter] public Guid FileId { get; set; }
    [Parameter] public Guid FileAnalysisId { get; set; }
    [Parameter] public Guid ParticipantId { get; set; }
    [Parameter] public Guid MessageId { get; set; }
    [Parameter] public Guid InventoryId { get; set; }

    private BitcoinInventoryItemDetailModel? _inventoryDetailModel;

    protected override async Task OnInitializedAsync()
    {
        BreadcrumbService.SetBreadcrumbs(AppRoutes.GetBitcoinInventoryReferencesBreadcrumbs(FileId, FileAnalysisId, ParticipantId, MessageId, InventoryId));
        try
        {
            _inventoryDetailModel = await BitcoinInventoryFacade.GetDetailModelByIdAsync(InventoryId, FileAnalysisId);

            if (_inventoryDetailModel == null)
            {
                Snackbar.Add($"Inventory item with ID {InventoryId} not found.", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading Bitcoin inventory references: {ex.Message}", Severity.Error);
            _inventoryDetailModel = null;
        }
    }

}

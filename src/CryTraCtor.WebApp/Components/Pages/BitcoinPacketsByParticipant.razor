@page "/files/{fileId:guid}/file-analysis/{fileAnalysisId:guid}/traffic-participants/{participantId:guid}/bitcoin"

@using CryTraCtor.Business.Facades.Interfaces
@using CryTraCtor.Business.Models.TrafficParticipants
@using CryTraCtor.WebApp.Services
@using CryTraCtor.WebApp.Enums
@using System.Linq
@using CryTraCtor.Business.Models.Bitcoin

@inject IBitcoinMessageFacade BitcoinMessageFacade
@inject ITrafficParticipantFacade TrafficParticipantFacade
@inject ISnackbar Snackbar
@inject IBreadcrumbService BreadcrumbService

<PageTitle>Bitcoin Messages for Participant</PageTitle>

<ParticipantNavButtonGroup FileId="FileId"
                           FileAnalysisId="FileAnalysisId"
                           ParticipantId="ParticipantId"
                           ActiveView="ParticipantViewType.Bitcoin"/>

@if (_participant != null)
{
    <h3>Bitcoin Messages for Participant @_participant.Address:@_participant.Port</h3>

    <MudSwitch @bind-Value="_showCombinedView" Label="Show Combined View" Color="Color.Primary" Class="mt-4 mb-4"/>

    @if (!_showCombinedView)
    {
        <h4 class="mt-4">Incoming Messages</h4>
        @if (_incomingPackets.Any())
        {
            <MudDataGrid Items="@_incomingPackets" T="BitcoinMessageDetailModel" Dense="true" Striped="true"
                         Hover="true">
                <Columns>
                    <PropertyColumn Property="x => x.Timestamp" Title="Timestamp" Format="yyyy-MM-dd HH:mm:ss.fff"/>
                    <PropertyColumn Property="x => x.Command" Title="Command"/>
                    <TemplateColumn Title="Summary">
                        <CellTemplate>
                            <BitcoinMessageSummary Message="context.Item"/>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.Sender!.Address" Title="Sender Address"/>
                    <PropertyColumn Property="x => x.Sender!.Port" Title="Sender Port"/>
                    <TemplateColumn Title="Actions">
                        <CellTemplate>
                            <MudTooltip Text="View Message Details">
                                <MudIconButton Icon="@Icons.Material.Filled.Info" Size="Size.Small"
                                               Color="Color.Primary"
                                               Href="@(AppRoutes.BitcoinMessageDetailUrl(FileId, FileAnalysisId, ParticipantId, context.Item.Id))"/>
                            </MudTooltip>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        }
        else
        {
            <MudText>No incoming Bitcoin messages found for this participant.</MudText>
        }


        <h4 class="mt-6">Outgoing Messages</h4>
        @if (_outgoingPackets.Any())
        {
            <MudDataGrid Items="@_outgoingPackets" T="BitcoinMessageDetailModel" Dense="true" Striped="true"
                         Hover="true">
                <Columns>
                    <PropertyColumn Property="x => x.Timestamp" Title="Timestamp" Format="yyyy-MM-dd HH:mm:ss.fff"/>
                    <PropertyColumn Property="x => x.Command" Title="Command"/>
                    <TemplateColumn Title="Summary">
                        <CellTemplate>
                            <BitcoinMessageSummary Message="context.Item"/>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.Recipient!.Address" Title="Recipient Address"/>
                    <PropertyColumn Property="x => x.Recipient!.Port" Title="Recipient Port"/>
                    <TemplateColumn Title="Actions">
                        <CellTemplate>
                            <MudTooltip Text="View Message Details">
                                <MudIconButton Icon="@Icons.Material.Filled.Info" Size="Size.Small"
                                               Color="Color.Primary"
                                               Href="@(AppRoutes.BitcoinMessageDetailUrl(FileId, FileAnalysisId, ParticipantId, context.Item.Id))"/>
                            </MudTooltip>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        }
        else
        {
            <MudText>No outgoing Bitcoin messages found for this participant.</MudText>
        }
    }
    else
    {
        <h4 class="mt-4">All Messages</h4>
        @if (_combinedPackets.Any())
        {
            <MudDataGrid Items="@_combinedPackets" T="BitcoinMessageDetailModel" Dense="true" Striped="true"
                         Hover="true">
                <Columns>
                    <PropertyColumn Property="x => x.Timestamp" Title="Timestamp" Format="yyyy-MM-dd HH:mm:ss.fff"/>
                    <PropertyColumn Property="x => x.Command" Title="Command"/>
                    <TemplateColumn Title="Summary">
                        <CellTemplate>
                            <BitcoinMessageSummary Message="context.Item"/>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Direction"
                                    SortBy="@(p => p.RecipientId == ParticipantId ? "Incoming" : "Outgoing")">
                        <CellTemplate>
                            @if (context.Item.RecipientId == ParticipantId)
                            {
                                <MudChip Label="true" Color="Color.Success" Size="Size.Small">Incoming</MudChip>
                            }
                            else
                            {
                                <MudChip Label="true" Color="Color.Info" Size="Size.Small">Outgoing</MudChip>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Remote Party">
                        <CellTemplate>
                            @if (context.Item.RecipientId == ParticipantId)
                            {
                                <MudText>@context.Item.Sender?.Address:@context.Item.Sender?.Port</MudText>
                            }
                            else
                            {
                                <MudText>@context.Item.Recipient?.Address:@context.Item.Recipient?.Port</MudText>
                            }
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Actions">
                        <CellTemplate>
                            <MudTooltip Text="View Message Details">
                                <MudIconButton Icon="@Icons.Material.Filled.Info" Size="Size.Small"
                                               Color="Color.Primary"
                                               Href="@(AppRoutes.BitcoinMessageDetailUrl(FileId, FileAnalysisId, ParticipantId, context.Item.Id))"/>
                            </MudTooltip>
                        </CellTemplate>
                    </TemplateColumn>
                </Columns>
            </MudDataGrid>
        }
        else
        {
            <MudText>No Bitcoin messages found for this participant.</MudText>
        }
    }
}
else
{
    <MudProgressCircular Indeterminate="true"/>
}


@code {
    [Parameter] public Guid FileId { get; set; }
    [Parameter] public Guid FileAnalysisId { get; set; }
    [Parameter] public Guid ParticipantId { get; set; }

    private TrafficParticipantDetailModel? _participant;
    private List<BitcoinMessageDetailModel> _incomingPackets = [];
    private List<BitcoinMessageDetailModel> _outgoingPackets = [];
    private List<BitcoinMessageDetailModel> _combinedPackets = [];
    private bool _showCombinedView;

    protected override async Task OnInitializedAsync()
    {
        _participant = await TrafficParticipantFacade.GetAsync(ParticipantId);
        if (_participant != null)
        {
            BreadcrumbService.SetBreadcrumbs(AppRoutes.GetTrafficParticipantBitcoinPageBreadcrumbs(FileId, FileAnalysisId, ParticipantId));
        }
        else
        {
            Snackbar.Add($"Participant with ID {ParticipantId} not found.", Severity.Error);
        }

        if (RendererInfo.IsInteractive)
        {
            await LoadBitcoinPacketsAsync();
        }

        StateHasChanged();
    }


    private async Task LoadBitcoinPacketsAsync()
    {
        if (_participant == null) return;

        try
        {
            var allPackets = await BitcoinMessageFacade.GetByFileAnalysisIdAsync(FileAnalysisId);

            _incomingPackets = allPackets
                .Where(p => p.RecipientId == ParticipantId)
                .OrderBy(p => p.Timestamp)
                .ToList();

            _outgoingPackets = allPackets
                .Where(p => p.SenderId == ParticipantId)
                .OrderBy(p => p.Timestamp)
                .ToList();

            _combinedPackets = allPackets
                .Where(p => p.SenderId == ParticipantId || p.RecipientId == ParticipantId)
                .OrderBy(p => p.Timestamp)
                .ToList();

            if (!_combinedPackets.Any())
            {
                Snackbar.Add($"No Bitcoin messages found for participant {_participant.Address}:{_participant.Port}.", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading Bitcoin message data: {ex.Message}", Severity.Error);
            _incomingPackets = [];
            _outgoingPackets = [];
            _combinedPackets = [];
        }
    }

}

@page "/files/{fileId:guid}/file-analysis/{fileAnalysisId:guid}/traffic-participants/{participantId:guid}/bitcoin"

@using CryTraCtor.Business.Facades.Interfaces
@using CryTraCtor.Business.Models
@using CryTraCtor.Business.Models.TrafficParticipants
@using CryTraCtor.WebApp.Services
@using CryTraCtor.WebApp.Enums
@using System.Linq
@using CryTraCtor.Business.Models.Bitcoin

@inject IBitcoinPacketFacade BitcoinPacketFacade
@inject ITrafficParticipantFacade TrafficParticipantFacade
@inject ISnackbar Snackbar
@inject IBreadcrumbService BreadcrumbService

<PageTitle>Bitcoin Messages for Participant</PageTitle>

<ParticipantNavButtonGroup FileId="FileId"
                           FileAnalysisId="FileAnalysisId"
                           ParticipantId="ParticipantId"
                           ActiveView="ParticipantViewType.Bitcoin"/>

@if (_participant != null)
{
    <h3>Bitcoin Messages for Participant @_participant.Address:@_participant.Port</h3>

    <h4 class="mt-4">Incoming Messages</h4>
    @if (_incomingPackets.Any())
    {
        <MudDataGrid Items="@_incomingPackets" T="BitcoinPacketDetailModel" Dense="true" Striped="true" Hover="true">
            <Columns>
                <PropertyColumn Property="x => x.Timestamp" Title="Timestamp" Format="yyyy-MM-dd HH:mm:ss.fff"/>
                <PropertyColumn Property="x => x.Command" Title="Command"/>
                <TemplateColumn Title="Summary">
                    <CellTemplate>
                        @if (context.Item.Command is "inv" or "getdata" or "notfound")
                        {
                            <MudText>@(context.Item.InventoryCount?.ToString() ?? "N/A") items</MudText>
                        }
                        else if (context.Item.Command == "headers")
                        {
                            <MudText>@(context.Item.Headers?.Count.ToString() ?? "N/A") headers</MudText>
                        }
                        else if (context.Item.Command == "tx")
                        {
                            var totalValueBtc = (context.Item.Transaction?.Outputs?.Sum(output => output.Value) ?? 0) / 100000000.0;
                            <MudText>Inputs: @(context.Item.Transaction?.Inputs?.Count() ?? 0), Outputs: @(context.Item.Transaction?.Outputs?.Count() ?? 0), Value: @(totalValueBtc.ToString("0.########")) BTC</MudText>
                        }
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.Sender!.Address" Title="Sender Address"/>
                <PropertyColumn Property="x => x.Sender!.Port" Title="Sender Port"/>
                <TemplateColumn Title="Actions">
                    <CellTemplate>
                        <MudTooltip Text="View Message Details">
                            <MudIconButton Icon="@Icons.Material.Filled.Info" Size="Size.Small" Color="Color.Primary"
                                           Href="@(AppRoutes.BitcoinMessageDetailUrl(FileId, FileAnalysisId, ParticipantId, context.Item.Id))"/>
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    }
    else
    {
        <MudText>No incoming Bitcoin messages found for this participant.</MudText>
    }


    <h4 class="mt-6">Outgoing Messages</h4>
    @if (_outgoingPackets.Any())
    {
        <MudDataGrid Items="@_outgoingPackets" T="BitcoinPacketDetailModel" Dense="true" Striped="true" Hover="true">
            <Columns>
                <PropertyColumn Property="x => x.Timestamp" Title="Timestamp" Format="yyyy-MM-dd HH:mm:ss.fff"/>
                <PropertyColumn Property="x => x.Command" Title="Command"/>
                 <TemplateColumn Title="Summary">
                    <CellTemplate>
                        @if (context.Item.Command is "inv" or "getdata" or "notfound")
                        {
                            <MudText>@(context.Item.InventoryCount?.ToString() ?? "N/A") items</MudText>
                        }
                         else if (context.Item.Command == "tx")
                        {
                            var totalValueBtc = (context.Item.Transaction?.Outputs?.Sum(output => output.Value) ?? 0) / 100000000.0;
                            <MudText>Inputs: @(context.Item.Transaction?.Inputs?.Count() ?? 0), Outputs: @(context.Item.Transaction?.Outputs?.Count() ?? 0), Value: @(totalValueBtc.ToString("0.########")) BTC</MudText>
                        }
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.Recipient!.Address" Title="Recipient Address"/>
                <PropertyColumn Property="x => x.Recipient!.Port" Title="Recipient Port"/>
                 <TemplateColumn Title="Actions">
                    <CellTemplate>
                        <MudTooltip Text="View Message Details">
                            <MudIconButton Icon="@Icons.Material.Filled.Info" Size="Size.Small" Color="Color.Primary"
                                           Href="@(AppRoutes.BitcoinMessageDetailUrl(FileId, FileAnalysisId, ParticipantId, context.Item.Id))"/>
                        </MudTooltip>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    }
    else
    {
        <MudText>No outgoing Bitcoin messages found for this participant.</MudText>
    }
}
else
{
    <MudProgressCircular Indeterminate="true"/>
}


@code {
    [Parameter] public Guid FileId { get; set; }
    [Parameter] public Guid FileAnalysisId { get; set; }
    [Parameter] public Guid ParticipantId { get; set; }

    private TrafficParticipantDetailModel? _participant;
    private List<BitcoinPacketDetailModel> _incomingPackets = [];
    private List<BitcoinPacketDetailModel> _outgoingPackets = [];
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        _participant = await TrafficParticipantFacade.GetAsync(ParticipantId);
        if (_participant != null)
        {
            BreadcrumbService.SetBreadcrumbs(AppRoutes.GetTrafficParticipantBitcoinPageBreadcrumbs(FileId, FileAnalysisId, ParticipantId));
        }
        else
        {
            Snackbar.Add($"Participant with ID {ParticipantId} not found.", Severity.Error);
        }

        if (RendererInfo.IsInteractive)
        {
            await LoadBitcoinPacketsAsync();
        }

        _isLoading = false;
        StateHasChanged();
    }


    private async Task LoadBitcoinPacketsAsync()
    {
        if (_participant == null) return;

        try
        {
            var allPackets = await BitcoinPacketFacade.GetByFileAnalysisIdAsync(FileAnalysisId);

            _incomingPackets = allPackets
                .Where(p => p.RecipientId == ParticipantId)
                .OrderBy(p => p.Timestamp)
                .ToList();

            _outgoingPackets = allPackets
                .Where(p => p.SenderId == ParticipantId)
                .OrderBy(p => p.Timestamp)
                .ToList();

            if (!_incomingPackets.Any() && !_outgoingPackets.Any())
            {
                Snackbar.Add($"No Bitcoin messages found for participant {_participant.Address}:{_participant.Port}.", Severity.Info);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading Bitcoin message data: {ex.Message}", Severity.Error);
            _incomingPackets = [];
            _outgoingPackets = [];
        }
    }

}

@page "/files/{FileId:guid}/file-analysis/{FileAnalysisId:guid}/traffic-participants/{TrafficParticipantId:guid}/known-domains"
@using CryTraCtor.Business.Facades.Interfaces
@using CryTraCtor.Business.Models.Aggregates
@inject ITrafficParticipantFacade TrafficParticipantFacade
@using CryTraCtor.WebApp.Services
@using CryTraCtor.WebApp.Enums
@inject IBreadcrumbService BreadcrumbService

<PageTitle>Known Domains for Traffic Participant</PageTitle>

<ParticipantNavButtonGroup FileId="FileId"
                           FileAnalysisId="FileAnalysisId"
                           ParticipantId="TrafficParticipantId"
                           ActiveView="ParticipantViewType.KnownDomains"/>

<h1>Known Domains Summary</h1>

@if (_isLoading)
{
    <p><em>Loading...</em></p>
}
else if (_summary == null)
{
    <p><em>Could not load summary data for the specified traffic participant.</em></p>
}
else
{
    <h2>Participant: @_summary.TrafficParticipantName</h2>

    @if (!_summary.ProductSummaries.Any())
    {
        <p><em>No known domain matches found for this participant.</em></p>
    }
    else
    {
        <MudStack Spacing="4">
            @foreach (var productSummary in _summary.ProductSummaries.OrderBy(p => p.ProductName))
            {
                <MudPaper Class="pa-4" Elevation="2">
                    <MudText Typo="Typo.h6" GutterBottom="true">Product: @productSummary.ProductName</MudText>
                    @if (!productSummary.PurposeSummaries.Any())
                    {
                        <MudText><em>No specific purposes found for this product.</em></MudText>
                    }
                    else
                    {
                        <MudDataGrid Items="@productSummary.PurposeSummaries.OrderBy(p => p.Purpose).ToList()"
                                     T="PurposeDomainSummary" Dense="true"
                                     Striped="true" Bordered="true" Hover="true">
                            <Columns>
                                <PropertyColumn Property="x => x.Purpose" Title="Purpose"/>
                                <PropertyColumn Property="x => x.TotalUniqueDomains" Title="Total Unique Domains"/>
                                <TemplateColumn Title="Exact Matches">
                                    <CellTemplate>
                                        @context.Item.UniqueExactMatchCount (@context.Item.TotalExactMatchCount)
                                    </CellTemplate>
                                </TemplateColumn>
                                <TemplateColumn Title="Subdomain Matches">
                                    <CellTemplate>
                                        @context.Item.UniqueSubdomainMatchCount (@context.Item.TotalSubdomainMatchCount)
                                    </CellTemplate>
                                </TemplateColumn>
                            </Columns>
                        </MudDataGrid>
                    }

                    @if (productSummary.LinkedGenericPackets.Any())
                    {
                        <MudText Typo="Typo.subtitle1" Class="mt-3 mb-2">Linked Generic Packets (via DNS to Product Domains):</MudText>
                        <MudDataGrid Items="@productSummary.LinkedGenericPackets.OrderByDescending(p => p.Timestamp)" T="LinkedGenericPacketModel" Dense="true"
                                     Striped="true" Bordered="true" Hover="true" MaxHeight="400px">
                            <Columns>
                                <PropertyColumn Property="x => x.Timestamp" Title="Timestamp" Format="s"/>
                                <PropertyColumn Property="x => x.TrafficDirection" Title="Direction"/>
                                <PropertyColumn Property="x => x.SourceIp" Title="Src IP"/>
                                <PropertyColumn Property="x => x.SourcePort" Title="Src Port"/>
                                <PropertyColumn Property="x => x.DestinationIp" Title="Dst IP"/>
                                <PropertyColumn Property="x => x.DestinationPort" Title="Dst Port"/>
                                <PropertyColumn Property="x => x.DnsQueryDomain" Title="DNS Query"/>
                                <PropertyColumn Property="x => x.MatchedDomain" Title="Matched Product Domain"/>
                            </Columns>
                        </MudDataGrid>
                    }
                    else
                    {
                        <MudText Class="mt-3"><em>No linked generic packets found for this product.</em></MudText>
                    }
                </MudPaper>
            }
        </MudStack>
    }
}

@code {
    [Parameter] public Guid FileId { get; set; }
    [Parameter] public Guid FileAnalysisId { get; set; }
    [Parameter] public Guid TrafficParticipantId { get; set; }

    private TrafficParticipantKnownDomainSummaryModel? _summary;
    private bool _isLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        _isLoading = true;

        BreadcrumbService
            .SetBreadcrumbs(AppRoutes.GetTrafficParticipantKnownDomainsPageBreadcrumbs(FileId, FileAnalysisId, TrafficParticipantId));

        try
        {
            _summary = await TrafficParticipantFacade.GetKnownDomainSummaryAsync(TrafficParticipantId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading known domain summary: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

}

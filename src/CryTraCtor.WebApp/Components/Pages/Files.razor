@page "/files"

@using CryTraCtor.Business.Facades.Interfaces
@using CryTraCtor.Business.Models.StoredFiles
@using CryTraCtor.WebApp.Options
@using Microsoft.Extensions.Options
@using CryTraCtor.WebApp.Services
@inject IStoredFileFacade StoredFileFacade
@inject ISnackbar Snackbar
@inject IOptions<FileUploadOptions> FileUploadOptions
@inject NavigationManager NavigationManager
@inject IBreadcrumbService BreadcrumbService

<h3>Files</h3>

<MudPaper Class="pa-4 mb-4">
    <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                   Accept=".pcap,.pcapng,.cap"
                   FilesChanged="OnInputFileChange"
                   MaximumFileCount="100">
        <ActivatorContent>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.CloudUpload">
                Upload File
            </MudButton>
        </ActivatorContent>
    </MudFileUpload>
</MudPaper>

<MudDataGrid Items="@_elements" Hover="true" RowClass="cursor-pointer" T="StoredFileListModel"
             RowClick="@RowClicked">
    <Columns>
        <PropertyColumn Property="x => x.Id" Title="Id"/>
        <PropertyColumn Property="x => x.PublicFileName" Title="Public File Name"/>
        <PropertyColumn Property="x => x.InternalFilePath" Title="Internal File Name"/>
        <PropertyColumn Property="x => x.MimeType" Title="Mime Type"/>
        <PropertyColumn Property="x => x.FileSize" Title="File Size"/>
        <TemplateColumn>
            <CellTemplate>
                <MudIconButton Icon="@Icons.Material.Filled.Analytics"
                               Color="Color.Primary"
                               OnClick="@(() => RowClicked(context.Item?.Id))"/>
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                               Color="Color.Error"
                               OnClick="@(() => DeleteFile(context.Item?.PublicFileName))"/>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
</MudDataGrid>

@code {
    private List<StoredFileListModel> _elements = [];

    protected override async Task OnInitializedAsync()
    {
        var breadcrumbs = new List<BreadcrumbItem>
        {
            new("Files", href: "/files", disabled: true)
        };
        BreadcrumbService.SetBreadcrumbs(breadcrumbs);

        if (RendererInfo.IsInteractive)
        {
            _elements = await StoredFileFacade.GetAllAsync();
        }
    }

    private async Task OnInputFileChange(IReadOnlyList<IBrowserFile>? fileList)
    {
        if (fileList is null || fileList.Count == 0)
        {
            return;
        }

        foreach (var file in fileList)
        {
            await using var stream = file.OpenReadStream(FileUploadOptions.Value.MaxFileSizeInBytes);
            var fileModel = new StoredFileCreateModel(file.Name, file.ContentType, file.Size);

            var storedFileName = await StoredFileFacade.StoreAsync(fileModel, stream);
            _elements = await StoredFileFacade.GetAllAsync();

            Snackbar.Add($"{storedFileName} uploaded successfully", Severity.Success);
        }
    }

    private async Task DeleteFile(string? publicFileName)
    {
        if (publicFileName is null)
        {
            return;
        }

        await StoredFileFacade.DeleteAsync(publicFileName);
        _elements = await StoredFileFacade.GetAllAsync();
        Snackbar.Add($"{publicFileName} deleted successfully", Severity.Success);
    }

    private void RowClicked(DataGridRowClickEventArgs<StoredFileListModel> args)
    {
        NavigationManager.NavigateTo($"/files/{args.Item.Id}/file-analysis/");
    }

    private void RowClicked(Guid? id)
    {
        if (id is not null)
        {
            NavigationManager.NavigateTo($"/files/{id}/file-analysis/");
        }
    }

}

// <auto-generated />
using System;
using CryTraCtor.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CryTraCtor.Database.Migrations
{
    [DbContext(typeof(CryTraCtorDbContext))]
    [Migration("20250425081250_AddBitcoinPacketEntity")]
    partial class AddBitcoinPacketEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CryTraCtor.Database.Entities.BitcoinPacketEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileAnalysisId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FileAnalysisId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.ToTable("BitcoinPacket");
                });

            modelBuilder.Entity("CryTraCtor.Database.Entities.CryptoProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Vendor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CryptoProduct");
                });

            modelBuilder.Entity("CryTraCtor.Database.Entities.DnsPacketEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileAnalysisId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsQuery")
                        .HasColumnType("boolean");

                    b.Property<string>("QueryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QueryType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid");

                    b.Property<string>("ResponseAddresses")
                        .HasColumnType("text");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TransactionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FileAnalysisId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.HasIndex("Timestamp");

                    b.ToTable("DnsPacket");
                });

            modelBuilder.Entity("CryTraCtor.Database.Entities.DomainMatchEntity", b =>
                {
                    b.Property<Guid>("KnownDomainId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DnsPacketId")
                        .HasColumnType("uuid");

                    b.Property<int>("MatchType")
                        .HasColumnType("integer");

                    b.HasKey("KnownDomainId", "DnsPacketId");

                    b.HasIndex("DnsPacketId");

                    b.ToTable("DomainMatch");
                });

            modelBuilder.Entity("CryTraCtor.Database.Entities.FileAnalysisEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("StoredFileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StoredFileId");

                    b.ToTable("FileAnalysis");
                });

            modelBuilder.Entity("CryTraCtor.Database.Entities.KnownDomainEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CryptoProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Purpose")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CryptoProductId");

                    b.ToTable("KnownDomain");
                });

            modelBuilder.Entity("CryTraCtor.Database.Entities.StoredFileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<string>("InternalFilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PublicFileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PublicFileName")
                        .IsUnique();

                    b.ToTable("StoredFile");
                });

            modelBuilder.Entity("CryTraCtor.Database.Entities.TrafficParticipantEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FileAnalysisId")
                        .HasColumnType("uuid");

                    b.Property<int>("Port")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FileAnalysisId");

                    b.HasIndex("Address", "Port", "FileAnalysisId")
                        .IsUnique();

                    b.ToTable("TrafficParticipant");
                });

            modelBuilder.Entity("CryTraCtor.Database.Entities.BitcoinPacketEntity", b =>
                {
                    b.HasOne("CryTraCtor.Database.Entities.FileAnalysisEntity", "FileAnalysis")
                        .WithMany()
                        .HasForeignKey("FileAnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CryTraCtor.Database.Entities.TrafficParticipantEntity", "Recipient")
                        .WithMany()
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CryTraCtor.Database.Entities.TrafficParticipantEntity", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileAnalysis");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("CryTraCtor.Database.Entities.DnsPacketEntity", b =>
                {
                    b.HasOne("CryTraCtor.Database.Entities.FileAnalysisEntity", "FileAnalysis")
                        .WithMany("DnsPackets")
                        .HasForeignKey("FileAnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CryTraCtor.Database.Entities.TrafficParticipantEntity", "Recipient")
                        .WithMany("ReceivedDnsPackets")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CryTraCtor.Database.Entities.TrafficParticipantEntity", "Sender")
                        .WithMany("SentDnsPackets")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileAnalysis");

                    b.Navigation("Recipient");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("CryTraCtor.Database.Entities.DomainMatchEntity", b =>
                {
                    b.HasOne("CryTraCtor.Database.Entities.DnsPacketEntity", "DnsPacket")
                        .WithMany()
                        .HasForeignKey("DnsPacketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CryTraCtor.Database.Entities.KnownDomainEntity", "KnownDomain")
                        .WithMany()
                        .HasForeignKey("KnownDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DnsPacket");

                    b.Navigation("KnownDomain");
                });

            modelBuilder.Entity("CryTraCtor.Database.Entities.FileAnalysisEntity", b =>
                {
                    b.HasOne("CryTraCtor.Database.Entities.StoredFileEntity", "StoredFile")
                        .WithMany()
                        .HasForeignKey("StoredFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StoredFile");
                });

            modelBuilder.Entity("CryTraCtor.Database.Entities.KnownDomainEntity", b =>
                {
                    b.HasOne("CryTraCtor.Database.Entities.CryptoProductEntity", "CryptoProduct")
                        .WithMany("KnownDomains")
                        .HasForeignKey("CryptoProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CryptoProduct");
                });

            modelBuilder.Entity("CryTraCtor.Database.Entities.TrafficParticipantEntity", b =>
                {
                    b.HasOne("CryTraCtor.Database.Entities.FileAnalysisEntity", "FileAnalysis")
                        .WithMany("TrafficParticipants")
                        .HasForeignKey("FileAnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileAnalysis");
                });

            modelBuilder.Entity("CryTraCtor.Database.Entities.CryptoProductEntity", b =>
                {
                    b.Navigation("KnownDomains");
                });

            modelBuilder.Entity("CryTraCtor.Database.Entities.FileAnalysisEntity", b =>
                {
                    b.Navigation("DnsPackets");

                    b.Navigation("TrafficParticipants");
                });

            modelBuilder.Entity("CryTraCtor.Database.Entities.TrafficParticipantEntity", b =>
                {
                    b.Navigation("ReceivedDnsPackets");

                    b.Navigation("SentDnsPackets");
                });
#pragma warning restore 612, 618
        }
    }
}
